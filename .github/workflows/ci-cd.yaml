name: Flutter CI/CD Workflow

on:
  push:
    branches:
      - main
      - release/*
      - feature/*
  pull_request:
    branches:
      - main
      - release/*
  workflow_dispatch:

jobs:
  build:
    name: Build and Test Flutter Project
    runs-on: ubuntu-latest

    env:
      FLUTTER_ENV: development
      API_URL: ${{ secrets.API_URL }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    steps:
      # Checkout code from GitHub
      - name: Check out repository
        uses: actions/checkout@v3

      # Cache Flutter Dependencies
      - name: Cache Flutter Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # Setup Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      # Verify Flutter installation
      - name: Flutter Doctor
        run: flutter doctor

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run tests (solo para ramas feature y development)
      - name: Run Tests
        if: startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/development'
        run: flutter test

  deploy:
    name: Deploy Flutter App
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      # Checkout code from GitHub
      - name: Check out repository
        uses: actions/checkout@v3

      # Setup Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'

      # Run Deployment Script (cambia este paso según tu proceso de despliegue)
      - name: Deploy Application
        run: echo "Desplegando la aplicación..."  # Aquí se debería colocar el script o comando específico para el despliegue

# Notificaciones y Reportes
  notifications:
    name: Notifications and Reports
    runs-on: ubuntu-latest
    needs: [build, deploy]

    steps:
      # Enviar notificación por correo electrónico en caso de fallos o éxito en la ejecución del pipeline
      - name: Send email notification
        if: failure() || success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI/CD Pipeline Notification - ${{ github.workflow }}'
          to: 'mtzalan080@gmail.com'
          body: 'El flujo de CI/CD para el proyecto ${{ github.repository }} ha completado con el estado: ${{ job.status }}.'
          from: 'ci-cd-notifications@ejemplo.com'

      # Dejar un comentario en Pull Request sobre el resultado de la ejecución
      - name: Post Pull Request Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}';
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🚀 El pipeline de CI/CD ha completado con el estado: ${status}.`,
            });
